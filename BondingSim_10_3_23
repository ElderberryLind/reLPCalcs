import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

def calculate_price(rdpx_amount, eth_amount):
    return eth_amount / rdpx_amount

def bonding_event(rdpx_in_lp, daily_bonded_eth_value, total_rdpx_supply, treasury_rdpx_reserves, re_lp_factor):
    amount_rdpx_removed = (daily_bonded_eth_value * 4 * rdpx_in_lp *
                           (treasury_rdpx_reserves ** 0.5) * re_lp_factor) / total_rdpx_supply
    return amount_rdpx_removed

def simulate_daily_events(rdpx_price_in_usd, eth_price_in_usd, total_liquidity_usd,
                          number_of_days, total_usd_value_bonded, total_rdpx_supply,
                          treasury_rdpx_reserves, re_lp_factor, max_pool_usd_value):

    initial_rdpx_amount = total_liquidity_usd / (2 * rdpx_price_in_usd)
    initial_eth_amount = total_liquidity_usd / (2 * eth_price_in_usd)

    rdpx_amount = initial_rdpx_amount
    eth_amount = initial_eth_amount

    daily_bonded_eth_value = (total_usd_value_bonded / 30) / eth_price_in_usd

    usd_prices = []
    daily_pool_values = []

    for day in range(number_of_days):
        amount_rdpx_removed = bonding_event(rdpx_amount, daily_bonded_eth_value,
                                            total_rdpx_supply, treasury_rdpx_reserves, re_lp_factor)
        rdpx_amount -= amount_rdpx_removed

        rdpx_price_in_usd = (eth_amount / rdpx_amount) * eth_price_in_usd
        usd_prices.append(rdpx_price_in_usd)

        half_daily_bonded_usd_value = (daily_bonded_eth_value * eth_price_in_usd) / 2
        potential_eth_amount = eth_amount + (half_daily_bonded_usd_value / eth_price_in_usd)
        potential_rdpx_amount = rdpx_amount + (half_daily_bonded_usd_value / rdpx_price_in_usd)
        potential_pool_value = (potential_eth_amount * eth_price_in_usd) + (potential_rdpx_amount * rdpx_price_in_usd)
        
        if potential_pool_value <= max_pool_usd_value:
            eth_amount = potential_eth_amount
            rdpx_amount = potential_rdpx_amount

        # After updating rdpx_amount and eth_amount:
        daily_pool_value = (rdpx_amount * rdpx_price_in_usd) + (eth_amount * eth_price_in_usd)
        daily_pool_values.append(daily_pool_value)     

    return {
      'usd_prices': usd_prices,
      'daily_pool_values': daily_pool_values}

def sensitivity_analysis(parameter_name, min_value, max_value, step_size, max_pool_usd_value):
    results_dict = {}

    default_rdpx_price_in_usd = 20
    default_eth_price_in_usd = 1600
    default_total_liquidity_usd = 3000000
    default_number_of_days = 30
    default_total_usd_value_bonded = 4000000
    default_total_rdpx_supply = 2200000
    default_treasury_rdpx_reserves = 800000
    default_re_lp_factor = 0.09

    for value in np.arange(min_value, max_value + step_size, step_size):
        parameters = {
            'rdpx_price_in_usd': default_rdpx_price_in_usd,
            'eth_price_in_usd': default_eth_price_in_usd,
            'total_liquidity_usd': default_total_liquidity_usd,
            'number_of_days': default_number_of_days,
            'total_usd_value_bonded': default_total_usd_value_bonded,
            'total_rdpx_supply': default_total_rdpx_supply,
            'treasury_rdpx_reserves': default_treasury_rdpx_reserves,
            're_lp_factor': default_re_lp_factor,
            'max_pool_usd_value': max_pool_usd_value
        }
        parameters[parameter_name] = value

        results = simulate_daily_events(**parameters)
        results_dict[value] = results

    return results_dict

rdpx_price_in_usd = 20
eth_price_in_usd = 1600
total_liquidity_usd = 3000000
number_of_days = 30
num_replications = 1
total_usd_value_bonded = 4000000
total_rdpx_supply = 2.2e6
treasury_rdpx_reserves = 800000
re_lp_factor = 0.09
max_pool_usd_value = 5000000

results = []
for _ in range(num_replications):
    result = simulate_daily_events(
        rdpx_price_in_usd, eth_price_in_usd, total_liquidity_usd,
        number_of_days, total_usd_value_bonded, total_rdpx_supply,
        treasury_rdpx_reserves, re_lp_factor, max_pool_usd_value
    )
    results.append(result)

days = list(range(1, number_of_days + 1))
plt.figure(figsize=(12, 5))
plt.subplot(2, 1, 1)
for res in results:
    plt.plot(days, res['usd_prices'], linewidth=2)
plt.title('RDPX Price in USD Over Simulation Days')
plt.xlabel('Day')
plt.ylabel('RDPX Price (USD)')
plt.grid(True, linestyle='--', alpha=0.7)

# New subplot for daily pool value
plt.subplot(2, 1, 2)
for res in results:
    plt.plot(days, res['daily_pool_values'], linewidth=2, color='green')
plt.title('USD Value of Liquidity Pool Over Simulation Days')
plt.xlabel('Day')
plt.ylabel('Liquidity Pool Value (USD)')
plt.grid(True, linestyle='--', alpha=0.7)

plt.tight_layout()
plt.show()

final_usd_prices = [res['usd_prices'][-1] for res in results]
summary_df = pd.DataFrame({'Final RDPX Price (USD)': final_usd_prices})
summary_stats = summary_df.describe(percentiles=[0.5]).transpose()[['mean', '50%', 'min', 'max']]
summary_stats.columns = ['Average', 'Median', 'Min', 'Max']
print(summary_stats)

parameter_name = 're_lp_factor'
min_value = 0.09
max_value = 0.5
step_size = 0.02
sensitivity_results = sensitivity_analysis(parameter_name, min_value, max_value, step_size, max_pool_usd_value)

plt.figure(figsize=(12, 5))
for value, results in sensitivity_results.items():
    plt.plot(days, results['usd_prices'], label=f'{parameter_name}={value}', linewidth=2)
plt.title(f'Sensitivity Analysis for {parameter_name}')
plt.xlabel('Day')
plt.ylabel('RDPX Price (USD)')
plt.legend(loc='upper left', bbox_to_anchor=(1, 1))
plt.grid(True, linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()
